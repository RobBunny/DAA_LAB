package DP;

import java.util.*;

class Pair {
    int weight;
    int value;

    Pair(int weight, int value) {
        this.weight = weight;
        this.value = value;
    }
}

public class test {
    // 0/1 Knapsack Problem using Memoization
    public static int knapsack(Pair arr[], int n, int W, int[][] dp) {
        if(n == 0 || W == 0) return 0;
        if(dp[n][W] != -1) return dp[n][W];
        int opt1 = 0;
        if(arr[n-1].weight <= W) {
            opt1 = arr[n-1].value + knapsack(arr, n-1, W - arr[n-1].weight, dp);
        } 
        int opt2 = knapsack(arr, n-1, W, dp);
        return dp[n][W] = Math.max(opt1, opt2);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Pair arr[] = new Pair[n];
        for(int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            arr[i] = new Pair(a, b);
        }
        int W = sc.nextInt();
        int[][] dp = new int[n+1][W+1];
        for(int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], -1);
        }
        int ans = knapsack(arr, n, W, dp);
        System.out.println(ans);
        sc.close();
    }
}
