package DP;

import java.util.*;

class Pair {
    int weight;
    int value;

    Pair(int weight, int value) {
        this.weight = weight;
        this.value = value;
    }
}

public class test {
    // Longest Common Subsequence (LCS) using Memoization
    public static int lcs(String s1, String s2, int n, int m, int[][] dp) {
        if(n == 0 || m == 0) return 0;
        if(dp[n][m] != -1) return dp[n][m];
        if(s1.charAt(n-1) == s2.charAt(m-1)) return dp[n][m] = 1 + lcs(s1, s2, n-1, m-1, dp);
        else return dp[n][m] = Math.max(lcs(s1, s2, n-1, m, dp), lcs(s1, s2, n, m-1, dp));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s1 = sc.nextLine();
        String s2 = sc.nextLine();
        int n = s1.length();
        int m = s2.length();
        int [][] dp = new int[n + 1][m + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], -1);
        }
        int ans = lcs(s1, s2, n, m, dp);
        System.out.println(ans);
        sc.close();
    }
}
