package DP;

import java.util.*;

class Pair {
    int weight;
    int value;

    Pair(int weight, int value) {
        this.weight = weight;
        this.value = value;
    }
}

public class test {
    // Function to calculate maximum profit from selling wines
    // using dynamic programming with memoization
    public static int wineselling(int wines[], int n, int left, int right, int[][] dp) {
        if (left > right) return 0;
        if (dp[left][right] != -1) return dp[left][right];
        int year = n - (right - left + 1) + 1;
        int start = wines[left]*year + wineselling(wines, n, left + 1, right, dp);
        int end = wines[right]*year + wineselling(wines, n, left, right - 1, dp);
        return dp[left][right] = Math.max(start, end);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int wines[] = new int[n];
        int[][] dp = new int[n+1][n+1];
        for(int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        for(int i = 0; i < n; i++) {
            wines[i] = sc.nextInt();
        }
        int ans = wineselling(wines, n, 0, n-1, dp);
        System.out.println(ans);
        sc.close();
    }
}
