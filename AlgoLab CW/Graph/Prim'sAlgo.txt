package Graph;
import java.util.*;
//import java.io.*;

class Pair {
    int node;
    int weight;
    Pair(int node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}

class GraphBuild {
    private int vertices;
    ArrayList<ArrayList<Pair>> adjList;
    GraphBuild(int vertices) {
        this.vertices = vertices;
        this.adjList = new ArrayList<>(vertices);
        for(int i=0; i<vertices; i++) adjList.add(new ArrayList<>());
    }

    void addEdge(int u, int v, int weight) {
        adjList.get(u).add(new Pair(v, weight));
        adjList.get(v).add(new Pair(u, weight));
    }
    
    int PrimAlgo(int s) {
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x, y) -> x.weight - y.weight);
        boolean[] visited = new boolean[vertices];
        int[] parent = new int[vertices];
        int[] key = new int[vertices];
        for(int i=0; i<vertices; i++) {
            key[i] = Integer.MAX_VALUE;
            parent[i] = -1;
        }
        pq.add(new Pair(s, 0));
        int sum = 0;
        while(!pq.isEmpty()) {
            Pair pair = pq.poll();
            int node = pair.node;
            int wt = pair.weight; 
            if(visited[node]) continue;
            visited[node] = true;
            sum += wt;
            for(Pair neighbour : adjList.get(node)) {
                int n = neighbour.node;
                int w = neighbour.weight;
                if(!visited[n] && key[n] > w) {
                    parent[n] = node;
                    key[n] = w;
                    pq.add(new Pair(n, w));
                }
            }
        }
        for(int i=0; i<vertices; i++) {
            if(parent[i] != -1) System.out.println(parent[i] + " " + i);
        }
        return sum;
    } 
}

public class test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int tempEdges [][] = new int[m][3];
        boolean isOneIndex = true;
        for(int i=0; i<m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int wt = sc.nextInt();
            tempEdges[i][0] = u;
            tempEdges[i][1] = v;
            tempEdges[i][2] = wt;
            if(u==0 || v==0) isOneIndex = false;
        }
        int size = isOneIndex ? n+1 : n;
        GraphBuild g = new GraphBuild(size);
        for(int edge[] : tempEdges) g.addEdge(edge[0], edge[1], edge[2]);
        int source = sc.nextInt();
        System.out.println(g.PrimAlgo(source));
        sc.close();
    }
}
