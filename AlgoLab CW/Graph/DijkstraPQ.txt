package Graph;
import java.util.*;

class Pair {
    int node;
    int weight;
    Pair(int node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}

class GraphBuild {
    int vertices;
    ArrayList<ArrayList<Pair>> adjList;
    GraphBuild(int vertices) {
        this.vertices = vertices;
        this.adjList = new ArrayList<>(vertices);
        for(int i=0; i<vertices; i++) adjList.add(new ArrayList<>());
    }

    void addEdge (int u, int v, int wt) {
        adjList.get(u).add(new Pair(v, wt));
        adjList.get(v).add(new Pair(u, wt));
    }

    void Dijkstra(int s) {
        //Doesn't work for negative weights
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x, y) -> x.weight - y.weight);
        int[] distance = new int[vertices];
        int[] parent = new int[vertices];
        for(int i=0; i<vertices; i++) {
            distance[i] = Integer.MAX_VALUE;
            parent[i] = i;
        }
        pq.add(new Pair(s, 0));
        distance[s] = 0;
        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            int nde = p.node;
            int wgt = p.weight;
            for(Pair neighbour : adjList.get(nde)) {
                int adj = neighbour.node;
                int dst = neighbour.weight;
                if(wgt + dst < distance[adj]) {
                    distance[adj] = dst + wgt;
                    parent[adj] = nde;
                    pq.add(new Pair(adj, distance[adj]));
                }
            }
        }
        for(int i=0; i<vertices; i++) {
            System.out.println("Distance from " + s + " to " + i + " is " + distance[i]);
        }
        for(int i=0; i<vertices; i++) {
            Stack<Integer> path = new Stack<>();
            int vertex = i;
            while(parent[vertex] != vertex) {
                path.push(vertex);
                vertex = parent[vertex];
            }
            path.push(vertex);
            while(!path.isEmpty()) {
                System.out.print(path.pop());
                if(!path.isEmpty()) System.out.print(" -> ");                
            }
            System.out.println();
        }
    }
}

public class test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int tempEdges [][] = new int[m][3];
        boolean isOneIndex = true;
        for(int i=0; i<m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int wt = sc.nextInt();
            if(u==0 || v==0) isOneIndex = false;
            tempEdges[i][0] = u;
            tempEdges[i][1] = v;
            tempEdges[i][2] = wt;
        }
        int size = isOneIndex ? n+1 : n;
        GraphBuild g = new GraphBuild(size);
        for(int edge[] : tempEdges) g.addEdge(edge[0], edge[1], edge[2]);
        int source = sc.nextInt();
        g.Dijkstra(source);
        sc.close();
    }
}