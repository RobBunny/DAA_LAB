import java.util.*;

class Graph {
    private int V;
    ArrayList<ArrayList<Integer>> adj;
    ArrayList<ArrayList<Integer>> transAdj;
    Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        transAdj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
            transAdj.add(new ArrayList<>());
        }
    }

    void addEdge(int u, int v) {
        adj.get(u).add(v);
    }

    void addTransEdge(int u, int v) {
        transAdj.get(u).add(v);
    }

    void DFS(int u, boolean[] visited, Stack<Integer> stack) {
        visited[u] = true;
        for (int v : adj.get(u)) {
            if (!visited[v]) {
                DFS(v, visited, stack);
            }
        }
        stack.push(u);
    }

    void transDFS(int u, boolean[] visited) {
        visited[u] = true;
        for (int v : transAdj.get(u)) {
            if (!visited[v]) {
                transDFS(v, visited);
            }
        }
    }

    int scc(boolean isOneIdx) {
        boolean[] visited = new boolean[V];
        Stack<Integer> stack = new Stack<>();
        int start = isOneIdx ? 1 : 0;
        for (int i = start; i < V; i++) {
            if (!visited[i]) {
                DFS(i, visited, stack);
            }
        }

        for (int i = start; i < V; i++) {
            visited[i] = false;
            for (int neighbour : adj.get(i)) {
                addTransEdge(neighbour, i);
            }
        }

        int count = 0;
        while (!stack.isEmpty()) {
            int u = stack.pop();
            if (!visited[u]) {
                transDFS(u, visited);
                count++;
            }
        }
        return count;
    }
}

public class Scc {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] edges = new int [m][2];
        boolean isOneIdx = true;

        for(int i=0; i<m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            edges[i][0] = u;
            edges[i][1] = v;
            if(u==0 || v==0) {
                isOneIdx = false;
            }
        }

        int size = isOneIdx ? n+1 : n;
        Graph g = new Graph(size);
        for (int edge[] : edges) {
            g.addEdge(edge[0], edge[1]);
        }
        System.out.println("# of strongly Connected Components: " + g.scc(isOneIdx));
        sc.close();
    }
}