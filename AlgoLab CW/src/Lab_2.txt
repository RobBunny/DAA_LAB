import java.io.*;
import java.util.*;

class Graph {

    private int vertices;
    private List<List<Integer>> adjList;
    public boolean isOneIdx;
    private int size;

    public Graph(String filename) throws IOException {
        File file = new File(filename);
        Scanner scanner = new Scanner(file);
        
        int ver = scanner.nextInt();
        int edg = scanner.nextInt();
        
        List<int[]> tempEdges = new ArrayList<>();
        boolean oneIdx = true;

        for(int i=0; i<edg; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            tempEdges.add(new int[]{u, v});

            if(u==0 || v==0) oneIdx = false;
        }
        this.vertices = ver;
        this.isOneIdx = oneIdx;
        this.size = isOneIdx ? vertices+1 : vertices;
        this.adjList = new ArrayList<>();

        for(int i=0; i<size; i++) {
            this.adjList.add(new ArrayList<>());
        }

        for(int[] edge : tempEdges) {
            int u = edge[0];
            int v = edge[1];
            this.adjList.get(u).add(v);
        }
        
        scanner.close();
    }

    public void addVertex(int n) {
        for(int i=0; i<n; i++) {
            this.adjList.add(new ArrayList<>());
            vertices++;
            size++;
        }
    }

    public void addEdge(int u, int v) {
        this.adjList.get(u).add(v);
    }

    public List<Integer> getAdjVertices (int u) {
        return this.adjList.get(u);
    }

    public void displayGraph() {
        int start = isOneIdx ? 1 : 0;
        for(int i=start; i<size; i++) {
            System.out.println(i + " -> ");
            for(int j : this.adjList.get(i)) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }

    public void DFS(int start) {
        boolean[] visited = new boolean[size];
        System.out.println("DFS starting from vertex " + start + ":");
        DFSUtil(start, visited);
        System.out.println();
    }

    public void DFSUtil(int start, boolean[] visited) {
        visited[start] = true;
        System.out.print(start + " ");
        for(int u : this.adjList.get(start)) {
            if(!visited[u]) {
                DFSUtil(u, visited);
            }
        }
    }

    public List<Integer> topologicalSort() {
        boolean[] visited = new boolean[size];
        Stack<Integer> sorted = new Stack<>();
        int start = isOneIdx ? 1 : 0;

        for(int i=start; i<size; i++) {
            if(!visited[i]) {
                topologicalSortUtil(i, visited, sorted);
            }
        }

        List<Integer> result = new ArrayList<>();
        while(!sorted.isEmpty()) {
            int temp = sorted.pop();
            result.add(temp);
        }
        return result;
    }

    public void topologicalSortUtil(int v, boolean[] visited, Stack<Integer> sorted) {
        visited[v] = true;
        for(int u : this.adjList.get(v)) {
            if(!visited[u]) {
                topologicalSortUtil(u, visited, sorted);
            }
        }
        sorted.push(v);
    }
}

public class Lab2 {
     public static void main(String[] args) throws IOException {

        Graph graph = new Graph("input.txt");

        System.out.println("Graph adjacency list:");
        graph.displayGraph();

        System.out.println("\nPerforming DFS starting from vertex 5:");
        graph.DFS(5);

        System.out.println("\nPerforming Topological Sort:");
        List<Integer> topoOrder = graph.topologicalSort();
        System.out.println("Topological Sort order: " + topoOrder);
    }

}
